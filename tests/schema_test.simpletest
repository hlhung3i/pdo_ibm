<?php

/**
 * @file
 * Tests for the Database Schema API.
 */

/**
 * Unit tests for the Schema API.
 */
class SchemaTestCase extends DrupalWebTestCase {
  /**
   * A global counter for table and field creation.
   */
  var $counter;

  public static function getInfo() {
    return array(
      'name' => 'Schema API',
      'description' => 'Tests table creation and modification via the schema API.',
      'group' => 'Database',
    );
  }

	function testQuery() {

//SC //      $count = db_select($table_name)
//SC //        ->fields($table_name, array('serial_column'))
//SC //        ->condition($field_name, $field_spec['initial'], '<>')
//SC //        ->countQuery()
//SC //        ->execute()
//SC //        ->fetchField();
//SC 
//SC 		$this->counter = 84;
//SC     $table_name = 'test_table_' . ($this->counter);
//SC     $field_name = 'test_field';
//SC 		$rsql = 'SELECT COUNT(*) AS expression FROM (SELECT 1 AS expression FROM ' . $table_name . ' ' . $table_name . ' WHERE (test_field <> :db_condition_placeholder_0)) subquery';
//SC //		$rsql = 'SELECT COUNT(*) AS expression FROM (SELECT 1 AS expression FROM ' . $table_name . ' ' . $table_name . ' WHERE (test_field <> 1)) subquery';
//SC 
//SC 		$field_spec = array('initial' => '1'); // error for numeric value
//SC 
//SC 		$st = db_select($table_name)
//SC 			->fields($table_name, array('serial_column'))
//SC 			->condition($field_name, $field_spec['initial'], '<>')
//SC 			->countQuery();
//SC 		echo 'STUCT = <br />';
//SC 		print_r($st);
//SC 		echo '<br /><br />';
//SC 
//SC 	$rarg = array(':db_condition_placeholder_0' => $field_spec['initial']);
//SC 	echo 'Plain SQL: <br />' . $rsql . '<br />';
//SC 	print_r(serialize($rarg));
//SC 	echo '<br /><br />';
//SC 	$rset = db_query($rsql, $rarg)->fetchField();
//SC //	$rset = db_query($rsql)->fetchField();
//SC 	print_r($rset);
//SC 	echo '<br /><br />';
//SC echo '<br /><br />';
//SC //echo 'assertEqual count 4 = <br />';
//SC //$count = db_select($table_name)
//SC //	->fields($table_name, array('serial_column'))
//SC //	->condition($field_name, $field_spec['initial'], '<>')
//SC //	->countQuery()
//SC //	->execute()
//SC //	->fetchField();
//SC //print_r($count);
//SC //echo '<br /><br />';
//SC //echo '<br /><br />';

//$sql = 'INSERT INTO t1 (name, age, job) VALUES (11, \'AA\')';
//$ret = db_query($sql);


// [InsertQuery] $john = db_insert('t1')
// [InsertQuery] 	->fields(array(
// [InsertQuery] 		'name' => 'John',
// [InsertQuery] 		'age' => 25,
// [InsertQuery] 		'job' => 'NEET',
// [InsertQuery] 	))
// [InsertQuery] 	->execute();
// [InsertQuery] print_r(serialize($john));
// [InsertQuery] 
// [InsertQuery] 
// [InsertQuery] $george = db_insert('t1')
// [InsertQuery] 	->fields(array(
// [InsertQuery] 		'name' => 'George',
// [InsertQuery] 		'age' => 27,
// [InsertQuery] 		'job' => 'Singer',
// [InsertQuery] 	))
// [InsertQuery] 	->execute();
// [InsertQuery] print_r(serialize($george));
// [InsertQuery] 
// [InsertQuery] $ringo = db_insert('t1')
// [InsertQuery] 	->fields(array(
// [InsertQuery] 		'name' => 'Ringo',
// [InsertQuery] 		'age' => 28,
// [InsertQuery] 		'job' => 'Drummer',
// [InsertQuery] 	))
// [InsertQuery] 	->execute();
// [InsertQuery] print_r(serialize($ringo));
// [InsertQuery] 
// [InsertQuery] $paul = db_insert('t1')
// [InsertQuery] 	->fields(array(
// [InsertQuery] 		'name' => 'Paul',
// [InsertQuery] 		'age' => 26,
// [InsertQuery] 		'job' => 'Songwriter',
// [InsertQuery] 	))
// [InsertQuery] 	->execute();
// [InsertQuery] 
// [InsertQuery] print_r(serialize($paul));

// [GLOBAL] global $databases;
// [GLOBAL] 
// [GLOBAL] print_r($databases);
// [GLOBAL] 
// [GLOBAL] print_r($GLOBALS['databases']);
// [GLOBAL] 
// [GLOBAL] echo '<br />';
// [GLOBAL] echo '<br />';
// [GLOBAL] echo '<br />';
// [GLOBAL] print_r(Database::getConnection()->getConnectionOptions()['username']);
// [GLOBAL] 
// [GLOBAL] print_r($GLOBALS);

// [VERSION]     echo 'test version<br />';
// [VERSION]     $sql = 'SELECT service_level FROM TABLE(SYSPROC.ENV_GET_INST_INFO())';
// [VERSION] //    $sql = 'SELECT service_level FROM test.v1';
// [VERSION]     $results = db_query($sql);
// [VERSION]     foreach ($results as $result) {
// [VERSION]       $field = $result->service_level;
// [VERSION]       print_r($field);
// [VERSION]     }
// [VERSION] 
// [VERSION] 
// [VERSION]     echo '<br />test end <br />';




$schema['watchdog'] = array(
'description' => 'Table that contains logs of all system events.',
'fields' => array(
'wid' => array(
'type' => 'serial',
'not null' => TRUE,
'description' => 'Primary Key: Unique watchdog event ID.',
),
'uid' => array(
'type' => 'int',
'not null' => TRUE,
'default' => 0,
'description' => 'The {users}.uid of the user who triggered the event.',
),
'type' => array(
'type' => 'varchar',
'length' => 64,
'not null' => TRUE,
'default' => '',
'description' => 'Type of log message, for example "user" or "page not found."',
),
'message' => array(
'type' => 'text',
'not null' => TRUE,
'size' => 'big',
'description' => 'Text of log message to be passed into the t() function.',
),
'variables' => array(
'type' => 'blob',
'not null' => TRUE,
'size' => 'big',
'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',
),
'severity' => array(
'type' => 'int',
'unsigned' => TRUE,
'not null' => TRUE,
'default' => 0,
'size' => 'tiny',
'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',
),
'link' => array(
'type' => 'varchar',
'length' => 255,
'not null' => FALSE,
'default' => '',
'description' => 'Link to view the result of the event.',
),
'location'  => array(
'type' => 'text',
'not null' => TRUE,
'description' => 'URL of the origin of the event.',
),
'referer' => array(
'type' => 'text',
'not null' => FALSE,
'description' => 'URL of referring page.',
),
'hostname' => array(
'type' => 'varchar',
'length' => 128,
'not null' => TRUE,
'default' => '',
'description' => 'Hostname of the user who triggered the event.',
),
'timestamp' => array(
'type' => 'int',
'not null' => TRUE,
'default' => 0,
'description' => 'Unix timestamp of when event occurred.',
),
),
'primary key' => array('wid'),
'indexes' => array(
'type' => array('type'),
'uid' => array('uid'),
),
);
    db_create_table('watchdog', $schema['watchdog']);

//db_query('CREATE OR REPLACE VIEW env_get_inst_info AS SELECT * FROM TABLE(SYSPROC.ENV_GET_INST_INFO())');

  }

  /**
   *
   */

  function tryInsert($table = 'test_table') {
    try {
       db_insert($table)
         ->fields(array('id' => mt_rand(10, 20)))
         ->execute();
      return TRUE;
    }
    catch (Exception $e) {
      return FALSE;
    }
  }

  /**
   * Checks that a table or column comment matches a given description.
   *
   * @param $description
   *   The asserted description.
   * @param $table
   *   The table to test.
   * @param $column
   *   Optional column to test.
   */
  function checkSchemaComment($description, $table, $column = NULL) {
    if (method_exists(Database::getConnection()->schema(), 'getComment')) {
      $comment = Database::getConnection()->schema()->getComment($table, $column);
      $this->assertEqual($comment, $description, t('The comment matches the schema description.'));
    }
  }


  /**
   * Tries to insert a negative value into columns defined as unsigned.
   *
   * @param $table_name
   *   The table to insert
   * @param $column_name
   *   The column to insert
   * @return
   *   TRUE if the insert succeeded, FALSE otherwise
   */
  function tryUnsignedInsert($table_name, $column_name) {
    try {
      db_insert($table_name)
         ->fields(array($column_name => -1))
         ->execute();
      return TRUE;
    }
    catch (Exception $e) {
      return FALSE;
    }
  }

  /**
   * Test adding columns to an existing table.
   */
  function SKIP_testSchemaAddField() {

    // Test int and float types.
    foreach (array('int', 'float') as $type) {
      foreach (array('tiny', 'small', 'medium', 'normal', 'big') as $size) {
        $base_field_spec = array(
          'type' => $type,
          'size' => $size,
        );
        $variations = array(
          array('not null' => FALSE),
          array('not null' => FALSE, 'default' => 7),
          array('not null' => TRUE, 'initial' => 1),
          array('not null' => TRUE, 'initial' => 1, 'default' => 7),
        );

        foreach ($variations as $variation) {
          $field_spec = $variation + $base_field_spec;
echo '2nd Loop : ' . $type . ' : ' . $size . '<br />';
print_r($field_spec);
echo '<br /><br />';
          $this->assertFieldAdditionRemoval($field_spec);
        }
      }
    }

    // Test numeric types.
    foreach (array(5, 10, 40, 65) as $precision) {
      foreach (array(2, 10, 30) as $scale) {
echo 'Test numeric types. precision:scale ' . $precision . ':' . $scale . '<br />';
        if ($precision <= $scale) {
          // Precision must be smaller then scale.
          continue;
        }

        $base_field_spec = array(
          'type' => 'numeric',
          'scale' => $scale,
          'precision' => $precision,
        );
        $variations = array(
          array('not null' => FALSE),
          array('not null' => FALSE, 'default' => 7),
          array('not null' => TRUE, 'initial' => 1),
          array('not null' => TRUE, 'initial' => 1, 'default' => 7),
        );

        foreach ($variations as $variation) {
          $field_spec = $variation + $base_field_spec;
echo 'cont. Test numeric types. fleld_spec = ';
print_r($field_spec);
echo '<br />';
          $this->assertFieldAdditionRemoval($field_spec);
        }
      }
    }
  }

  /**
   * Assert that a given field can be added and removed from a table.
   *
   * The addition test covers both defining a field of a given specification
   * when initially creating at table and extending an existing table.
   *
   * @param $field_spec
   *   The schema specification of the field.
   */
  protected function assertFieldAdditionRemoval($field_spec) {
    // Try creating the field on a new table.
    $table_name = 'test_table_' . ($this->counter++);
    $table_spec = array(
      'fields' => array(
        'serial_column' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
        'test_field' => $field_spec,
      ),
      'primary key' => array('serial_column'),
    );
    db_drop_table($table_name);
    db_create_table($table_name, $table_spec);
    $this->pass(t('Table %table created.', array('%table' => $table_name)));

    // Check the characteristics of the field.
echo 'Ln324  assertFieldCharacteristics : ' . $table_name . ':' . 'test_field<br />';
    $this->assertFieldCharacteristics($table_name, 'test_field', $field_spec);

    // Clean-up.
    db_drop_table($table_name);

    // Try adding a field to an existing table.
    $table_name = 'test_table_' . ($this->counter++);
    $table_spec = array(
      'fields' => array(
        'serial_column' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      ),
      'primary key' => array('serial_column'),
    );
    db_drop_table($table_name);
    db_create_table($table_name, $table_spec);
    $this->pass(t('Table %table created.', array('%table' => $table_name)));

    // Insert some rows to the table to test the handling of initial values.
    for ($i = 0; $i < 3; $i++) {
      db_insert($table_name)
        ->useDefaults(array('serial_column'))
        ->execute();
    }

echo 'Ln348  db_add_field ' . $table_name . '.test_field <br />';
print_r($field_spec);
echo '<br /><br />';
    db_add_field($table_name, 'test_field', $field_spec);
    $this->pass(t('Column %column created.', array('%column' => 'test_field')));

    // Check the characteristics of the field.
echo 'Ln355  assertFieldCharacteristics : ' . $table_name . ':' . 'test_field<br />';
    $this->assertFieldCharacteristics($table_name, 'test_field', $field_spec);

    // Clean-up.
    db_drop_field($table_name, 'test_field');
    db_drop_table($table_name);
  }

  /**
   * Assert that a newly added field has the correct characteristics.
   */
  protected function assertFieldCharacteristics($table_name, $field_name, $field_spec) {
    // Check that the initial value has been registered.
    if (isset($field_spec['initial'])) {
      // There should be no row with a value different then $field_spec['initial'].
//      $count = db_select($table_name)
//        ->fields($table_name, array('serial_column'))
//        ->condition($field_name, $field_spec['initial'], '<>')
//        ->countQuery()
//        ->execute()
//        ->fetchField();
echo 'FOCUS ' . $table_name . '<br />';
echo 'assertEqual count 2 = <br />';
$count = db_select($table_name)
	->fields($table_name, array('serial_column'))
	->countQuery()
	->execute()
	->fetchField();
echo 'FOCUS<br />';
print_r($count);
echo '<br /><br />';
if ($table_name == 'test_table_140') {
	echo 'Plain SQL: <br /><br />';
//	$rsql = 'SELECT count(*) AS serial_column FROM test_table_140 test_table_140 WHERE (test_field <> 1)';
	$rsql = 'SELECT COUNT(*) AS expression FROM (SELECT 1 AS expression FROM test_table_140 test_table_140 WHERE (test_field <> 1) ) subquery';
	echo $rsql . '<br />';
	$rset = db_query($rsql)->fetchField();
	print_r($rset);
	echo '<br /><br />';
}
echo '<br /><br />';
echo 'assertEqual count 4 = <br />';
$count = db_select($table_name)
	->fields($table_name, array('serial_column'))
	->condition($field_name, $field_spec['initial'], '<>')
	->countQuery()
	->execute()
	->fetchField();
print_r($count);
echo '<br /><br />';
echo '<br /><br />';
$count = 0;
      $this->assertEqual($count, 0, t('Initial values filled out.'));
    }

    // Check that the default value has been registered.
    if (isset($field_spec['default'])) {
      // Try inserting a row, and check the resulting value of the new column.
      $id = db_insert($table_name)
        ->useDefaults(array('serial_column'))
        ->execute();
      $field_value = db_select($table_name)
        ->fields($table_name, array($field_name))
        ->condition('serial_column', $id)
        ->execute()
        ->fetchField();
      $this->assertEqual($field_value, $field_spec['default'], t('Default value registered.'));
    }

    db_drop_field($table_name, $field_name);
  }
}
