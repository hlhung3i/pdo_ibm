<?php

/**
 * @file
 * Tests for the Database Schema API.
 */

/**
 * Unit tests for the Schema API.
 */
class SchemaTestCase extends DrupalWebTestCase {
  /**
   * A global counter for table and field creation.
   */
  var $counter;

  public static function getInfo() {
    return array(
      'name' => 'Schema API',
      'description' => 'Tests table creation and modification via the schema API.',
      'group' => 'Database',
    );
  }

	function testQuery() {

//SC //      $count = db_select($table_name)
//SC //        ->fields($table_name, array('serial_column'))
//SC //        ->condition($field_name, $field_spec['initial'], '<>')
//SC //        ->countQuery()
//SC //        ->execute()
//SC //        ->fetchField();
//SC 
//SC 		$this->counter = 84;
//SC     $table_name = 'test_table_' . ($this->counter);
//SC     $field_name = 'test_field';
//SC 		$rsql = 'SELECT COUNT(*) AS expression FROM (SELECT 1 AS expression FROM ' . $table_name . ' ' . $table_name . ' WHERE (test_field <> :db_condition_placeholder_0)) subquery';
//SC //		$rsql = 'SELECT COUNT(*) AS expression FROM (SELECT 1 AS expression FROM ' . $table_name . ' ' . $table_name . ' WHERE (test_field <> 1)) subquery';
//SC 
//SC 		$field_spec = array('initial' => '1'); // error for numeric value
//SC 
//SC 		$st = db_select($table_name)
//SC 			->fields($table_name, array('serial_column'))
//SC 			->condition($field_name, $field_spec['initial'], '<>')
//SC 			->countQuery();
//SC 		echo 'STUCT = <br />';
//SC 		print_r($st);
//SC 		echo '<br /><br />';
//SC 
//SC 	$rarg = array(':db_condition_placeholder_0' => $field_spec['initial']);
//SC 	echo 'Plain SQL: <br />' . $rsql . '<br />';
//SC 	print_r(serialize($rarg));
//SC 	echo '<br /><br />';
//SC 	$rset = db_query($rsql, $rarg)->fetchField();
//SC //	$rset = db_query($rsql)->fetchField();
//SC 	print_r($rset);
//SC 	echo '<br /><br />';
//SC echo '<br /><br />';
//SC //echo 'assertEqual count 4 = <br />';
//SC //$count = db_select($table_name)
//SC //	->fields($table_name, array('serial_column'))
//SC //	->condition($field_name, $field_spec['initial'], '<>')
//SC //	->countQuery()
//SC //	->execute()
//SC //	->fetchField();
//SC //print_r($count);
//SC //echo '<br /><br />';
//SC //echo '<br /><br />';

//$sql = 'INSERT INTO t1 (name, age, job) VALUES (11, \'AA\')';
//$ret = db_query($sql);


// [InsertQuery] $john = db_insert('t1')
// [InsertQuery] 	->fields(array(
// [InsertQuery] 		'name' => 'John',
// [InsertQuery] 		'age' => 25,
// [InsertQuery] 		'job' => 'NEET',
// [InsertQuery] 	))
// [InsertQuery] 	->execute();
// [InsertQuery] print_r(serialize($john));
// [InsertQuery] 
// [InsertQuery] 
// [InsertQuery] $george = db_insert('t1')
// [InsertQuery] 	->fields(array(
// [InsertQuery] 		'name' => 'George',
// [InsertQuery] 		'age' => 27,
// [InsertQuery] 		'job' => 'Singer',
// [InsertQuery] 	))
// [InsertQuery] 	->execute();
// [InsertQuery] print_r(serialize($george));
// [InsertQuery] 
// [InsertQuery] $ringo = db_insert('t1')
// [InsertQuery] 	->fields(array(
// [InsertQuery] 		'name' => 'Ringo',
// [InsertQuery] 		'age' => 28,
// [InsertQuery] 		'job' => 'Drummer',
// [InsertQuery] 	))
// [InsertQuery] 	->execute();
// [InsertQuery] print_r(serialize($ringo));
// [InsertQuery] 
// [InsertQuery] $paul = db_insert('t1')
// [InsertQuery] 	->fields(array(
// [InsertQuery] 		'name' => 'Paul',
// [InsertQuery] 		'age' => 26,
// [InsertQuery] 		'job' => 'Songwriter',
// [InsertQuery] 	))
// [InsertQuery] 	->execute();
// [InsertQuery] 
// [InsertQuery] print_r(serialize($paul));

// [GLOBAL] global $databases;
// [GLOBAL] 
// [GLOBAL] print_r($databases);
// [GLOBAL] 
// [GLOBAL] print_r($GLOBALS['databases']);
// [GLOBAL] 
// [GLOBAL] echo '<br />';
// [GLOBAL] echo '<br />';
// [GLOBAL] echo '<br />';
// [GLOBAL] print_r(Database::getConnection()->getConnectionOptions()['username']);
// [GLOBAL] 
// [GLOBAL] print_r($GLOBALS);

// [VERSION]     echo 'test version<br />';
// [VERSION]     $sql = 'SELECT service_level FROM TABLE(SYSPROC.ENV_GET_INST_INFO())';
// [VERSION] //    $sql = 'SELECT service_level FROM test.v1';
// [VERSION]     $results = db_query($sql);
// [VERSION]     foreach ($results as $result) {
// [VERSION]       $field = $result->service_level;
// [VERSION]       print_r($field);
// [VERSION]     }
// [VERSION] 
// [VERSION] 
// [VERSION]     echo '<br />test end <br />';




// [WDOG] $schema['watchdog'] = array(
// [WDOG] 'description' => 'Table that contains logs of all system events.',
// [WDOG] 'fields' => array(
// [WDOG] 'wid' => array(
// [WDOG] 'type' => 'serial',
// [WDOG] 'not null' => TRUE,
// [WDOG] 'description' => 'Primary Key: Unique watchdog event ID.',
// [WDOG] ),
// [WDOG] 'uid' => array(
// [WDOG] 'type' => 'int',
// [WDOG] 'not null' => TRUE,
// [WDOG] 'default' => 0,
// [WDOG] 'description' => 'The {users}.uid of the user who triggered the event.',
// [WDOG] ),
// [WDOG] 'type' => array(
// [WDOG] 'type' => 'varchar',
// [WDOG] 'length' => 64,
// [WDOG] 'not null' => TRUE,
// [WDOG] 'default' => '',
// [WDOG] 'description' => 'Type of log message, for example "user" or "page not found."',
// [WDOG] ),
// [WDOG] 'message' => array(
// [WDOG] 'type' => 'text',
// [WDOG] 'not null' => TRUE,
// [WDOG] 'size' => 'big',
// [WDOG] 'description' => 'Text of log message to be passed into the t() function.',
// [WDOG] ),
// [WDOG] 'variables' => array(
// [WDOG] 'type' => 'blob',
// [WDOG] 'not null' => TRUE,
// [WDOG] 'size' => 'big',
// [WDOG] 'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',
// [WDOG] ),
// [WDOG] 'severity' => array(
// [WDOG] 'type' => 'int',
// [WDOG] 'unsigned' => TRUE,
// [WDOG] 'not null' => TRUE,
// [WDOG] 'default' => 0,
// [WDOG] 'size' => 'tiny',
// [WDOG] 'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',
// [WDOG] ),
// [WDOG] 'link' => array(
// [WDOG] 'type' => 'varchar',
// [WDOG] 'length' => 255,
// [WDOG] 'not null' => FALSE,
// [WDOG] 'default' => '',
// [WDOG] 'description' => 'Link to view the result of the event.',
// [WDOG] ),
// [WDOG] 'location'  => array(
// [WDOG] 'type' => 'text',
// [WDOG] 'not null' => TRUE,
// [WDOG] 'description' => 'URL of the origin of the event.',
// [WDOG] ),
// [WDOG] 'referer' => array(
// [WDOG] 'type' => 'text',
// [WDOG] 'not null' => FALSE,
// [WDOG] 'description' => 'URL of referring page.',
// [WDOG] ),
// [WDOG] 'hostname' => array(
// [WDOG] 'type' => 'varchar',
// [WDOG] 'length' => 128,
// [WDOG] 'not null' => TRUE,
// [WDOG] 'default' => '',
// [WDOG] 'description' => 'Hostname of the user who triggered the event.',
// [WDOG] ),
// [WDOG] 'timestamp' => array(
// [WDOG] 'type' => 'int',
// [WDOG] 'not null' => TRUE,
// [WDOG] 'default' => 0,
// [WDOG] 'description' => 'Unix timestamp of when event occurred.',
// [WDOG] ),
// [WDOG] ),
// [WDOG] 'primary key' => array('wid'),
// [WDOG] 'indexes' => array(
// [WDOG] 'type' => array('type'),
// [WDOG] 'uid' => array('uid'),
// [WDOG] ),
// [WDOG] );
// [WDOG]     db_create_table('watchdog', $schema['watchdog']);

//db_query('CREATE OR REPLACE VIEW env_get_inst_info AS SELECT * FROM TABLE(SYSPROC.ENV_GET_INST_INFO())');

// [INSERT_MENU_ROUTER] $p_values = ':PATH, :LOAD_FUNCTIONS, :TO_ARG_FUNCTIONS, :ACCESS_CALLBACK, :ACCESS_ARGUMENTS, :PAGE_CALLBACK, :PAGE_ARGUMENTS, :DELIVERY_CALLBACK, :FIT, :NUMBER_PARTS, :CONTEXT, :TAB_PARENT, :TAB_ROOT, :TITLE, :TITLE_CALLBACK, :TITLE_ARGUMENTS, :THEME_CALLBACK, :THEME_ARGUMENTS, :TYPE, :DESCRIPTION, :POSITION, :WEIGHT, :INCLUDE_FILE';
// [INSERT_MENU_ROUTER] $args = array(
// [INSERT_MENU_ROUTER]   ':PATH'=>             'node',
// [INSERT_MENU_ROUTER]   ':LOAD_FUNCTIONS'=>   '',
// [INSERT_MENU_ROUTER]   ':TO_ARG_FUNCTIONS'=> '',
// [INSERT_MENU_ROUTER]   ':ACCESS_CALLBACK'=>  'user_access',
// [INSERT_MENU_ROUTER]   ':ACCESS_ARGUMENTS'=> 'a:1:{i:0;s:14:"access content";}',
// [INSERT_MENU_ROUTER]   ':PAGE_CALLBACK'=>    'node_page_default',
// [INSERT_MENU_ROUTER]   ':PAGE_ARGUMENTS'=>   'a:0:{}',
// [INSERT_MENU_ROUTER]   ':DELIVERY_CALLBACK'=>'',
// [INSERT_MENU_ROUTER]   ':FIT'=>              '1',
// [INSERT_MENU_ROUTER]   ':NUMBER_PARTS'=>     '1',
// [INSERT_MENU_ROUTER]   ':CONTEXT'=>          '0',
// [INSERT_MENU_ROUTER]   ':TAB_PARENT'=>       '',
// [INSERT_MENU_ROUTER]   ':TAB_ROOT'=>         'node',
// [INSERT_MENU_ROUTER]   ':TITLE'=>            '',
// [INSERT_MENU_ROUTER]   ':TITLE_CALLBACK'=>   't',
// [INSERT_MENU_ROUTER]   ':TITLE_ARGUMENTS'=>  '',
// [INSERT_MENU_ROUTER]   ':THEME_CALLBACK'=>   '',
// [INSERT_MENU_ROUTER]   ':THEME_ARGUMENTS'=>  'a:0:{}',
// [INSERT_MENU_ROUTER]   ':TYPE'=>             '0',
// [INSERT_MENU_ROUTER]   ':DESCRIPTION'=>      '',
// [INSERT_MENU_ROUTER]   ':POSITION'=>         '',
// [INSERT_MENU_ROUTER]   ':WEIGHT'=>           '0',
// [INSERT_MENU_ROUTER]   ':INCLUDE_FILE'=>     ''
// [INSERT_MENU_ROUTER] );
// [INSERT_MENU_ROUTER] 
// [INSERT_MENU_ROUTER] $sql = "INSERT INTO menu_router VALUES ($p_values)";
// [INSERT_MENU_ROUTER] echo "<br /><br />";
// [INSERT_MENU_ROUTER] print_r($sql);
// [INSERT_MENU_ROUTER] echo "<br /><br />";
// [INSERT_MENU_ROUTER] print_r($args);
// [INSERT_MENU_ROUTER] echo "<br /><br />";
// [INSERT_MENU_ROUTER] db_query($sql, $args);

// [TRUNCATE_MENU_ROUTER] $ret=db_truncate('tt')->execute();
// [TRUNCATE_MENU_ROUTER] print_r(serialize($ret));
// [TRUNCATE_MENU_ROUTER] $insert = db_insert('tt')
// [TRUNCATE_MENU_ROUTER]   ->fields(array(
// [TRUNCATE_MENU_ROUTER]     'nid',
// [TRUNCATE_MENU_ROUTER]    ));
// [TRUNCATE_MENU_ROUTER] $num_records = 0;
// [TRUNCATE_MENU_ROUTER] $menu = array('0'=> 10, '1'=>11, '2'=>12);
// [TRUNCATE_MENU_ROUTER] foreach ($menu as $path => $item) {
// [TRUNCATE_MENU_ROUTER]   $insert->values(array(
// [TRUNCATE_MENU_ROUTER]     'nid' => $item,
// [TRUNCATE_MENU_ROUTER]     ));
// [TRUNCATE_MENU_ROUTER]   $insert->execute();
// [TRUNCATE_MENU_ROUTER]   $num_records++;
// [TRUNCATE_MENU_ROUTER] }

// ////////////////////////////////////

  // menu {{{
  $menu = 
array (
"rss.xml"=>array (
  "title"=>"RSS feed",
  "page callback"=>"node_feed",
  "access arguments"=>array (
    0=>"access content",
    ),
  "type"=>0,
  "module"=>"node",
  "_load_functions"=>array (),
  "to_arg_functions"=>"",
  "weight"=>0,
  "_number_parts"=>1,
  "_parts"=>array (
    0=>"rss.xml",
  ),
  "_fit"=>1,
  "_visible"=>false,
  "_tab"=>false,
  "tab_parent"=>"",
  "tab_root"=>"rss.xml",
  "access callback"=>"user_access",
  "load_functions"=>"",
  "page arguments"=>array (),
  "delivery callback"=>"",
  "title arguments"=>array (),
  "title callback"=>"t",
  "theme arguments"=>array (),
  "theme callback"=>"",
  "description"=>"",
  "position"=>"",
  "context"=>0,
  "path"=>"rss.xml",
  "file"=>"",
  "file path"=>"",
  "include file"=>"",
),
"node"=>array (
"page callback"=>"node_page_default",
"access arguments"=>array (
0=>"access content",
),
"menu_name"=>"navigation",
"type"=>0,
"module"=>"node",
"_load_functions"=>array (
),
"to_arg_functions"=>"",
"title"=>"",
"weight"=>0,
"_number_parts"=>1,
"_parts"=>array (
0=>"node",
),
"_fit"=>1,
"_visible"=>false,
"_tab"=>false,
"tab_parent"=>"",
"tab_root"=>"node",
"access callback"=>"user_access",
"load_functions"=>"",
"page arguments"=>array (
),
"delivery callback"=>"",
"title arguments"=>array (
),
"title callback"=>"t",
"theme arguments"=>array (
),
"theme callback"=>"",
"description"=>"",
"position"=>"",
"context"=>0,
"path"=>"node",
"file"=>"",
"file path"=>"",
"include file"=>"",
),
// "batch"=>array (
// "page callback"=>"system_batch_page",
// "access callback"=>1,
// "theme callback"=>"_system_batch_theme",
// "type"=>0,
// "file"=>"system.admin.inc",
// "module"=>"system",
// "_load_functions"=>array (
// ),
// "to_arg_functions"=>"",
// "title"=>"",
// "weight"=>0,
// "_number_parts"=>1,
// "_parts"=>array (
// 0=>"batch",
// ),
// "_fit"=>1,
// "_visible"=>false,
// "_tab"=>false,
// "tab_parent"=>"",
// "tab_root"=>"batch",
// "load_functions"=>"",
// "access arguments"=>array (
// ),
// "page arguments"=>array (
// ),
// "delivery callback"=>"",
// "title arguments"=>array (
// ),
// "title callback"=>"t",
// "theme arguments"=>array (
// ),
// "description"=>"",
// "position"=>"",
// "context"=>0,
// "path"=>"batch",
// "file path"=>"",
// "include file"=>"modules/system/system.admin.inc",
// ),
)
;
  // menu }}}
  // mask {{{
    $masks = 
    array(
      125,
      121,
      63,
      62,
      61,
      60,
      44,
      31,
      30,
      24,
      21,
      15,
      14,
      11,
      7,
      5,
      3,
      2,
      1,
    );
  // mask }}}

//// {{{
//  // Delete the existing router since we have some data to replace it.
//  db_truncate('menu_router')->execute();
//
//  $insert = db_insert('menu_router')
//    ->fields(array(
//      'path',
//      'load_functions',
//      'to_arg_functions',
//      'access_callback',
//      'access_arguments',
//      'page_callback',
//      'page_arguments',
//      'delivery_callback',
//      'fit',
//      'number_parts',
//      'context',
//      'tab_parent',
//      'tab_root',
//      'title',
//      'title_callback',
//      'title_arguments',
//      'theme_callback',
//      'theme_arguments',
//      'type',
//      'description',
//      'position',
//      'weight',
//      'include_file',
//    ));
//
//  $num_records = 0;
//
//  foreach ($menu as $path => $item) {
//    // Fill in insert object values.
//    $insert->values(array(
//      'path' => $item['path'],
//      'load_functions' => $item['load_functions'],
//      'to_arg_functions' => $item['to_arg_functions'],
//      'access_callback' => $item['access callback'],
//      'access_arguments' => serialize($item['access arguments']),
//      'page_callback' => $item['page callback'],
//      'page_arguments' => serialize($item['page arguments']),
//      'delivery_callback' => $item['delivery callback'],
//      'fit' => $item['_fit'],
//      'number_parts' => $item['_number_parts'],
//      'context' => $item['context'],
//      'tab_parent' => $item['tab_parent'],
//      'tab_root' => $item['tab_root'],
//      'title' => $item['title'],
//      'title_callback' => $item['title callback'],
//      'title_arguments' => ($item['title arguments'] ? serialize($item['title arguments']) : ''),
//      'theme_callback' => $item['theme callback'],
//      'theme_arguments' => serialize($item['theme arguments']),
//      'type' => $item['type'],
//      'description' => $item['description'],
//      'position' => $item['position'],
//      'weight' => $item['weight'],
//      'include_file' => $item['include file'],
//    ));
//
//echo 'insert:<pre>';
//var_dump($insert);
//echo '</pre><br/>';
//syslog(LOG_DEBUG, 'Add menu_router: inloop: '. $item['path']);
//
//    // Execute in batches to avoid the memory overhead of all of those records
//    // in the query object.
//    if (++$num_records == 20) {
//      $insert->execute();
//      $num_records = 0;
//    }
//  }
//
//
//echo 'Start Execute<br />';
//  // Insert any remaining records.
//  $insert->execute();
//
//  // Store the masks.
//  variable_set('menu_masks', $masks);
//
//echo 'End of Test <br />';
//
//// }}}

// [INSERTBLOB]   // menu {{{
// [INSERTBLOB]   $menu = 
// [INSERTBLOB] array (
// [INSERTBLOB] "rss.xml"=>array (
// [INSERTBLOB]   "blob1"=>'',
// [INSERTBLOB]   "blob2"=>"",
// [INSERTBLOB]   "blob3"=>array (
// [INSERTBLOB]     0=>"access content",
// [INSERTBLOB]     ),
// [INSERTBLOB]   "blob4"=>array (),
// [INSERTBLOB] ),
// [INSERTBLOB] );
// [INSERTBLOB]   // menu }}}
// [INSERTBLOB]   // mask {{{
// [INSERTBLOB]     $masks = 
// [INSERTBLOB]     array(
// [INSERTBLOB]       125,
// [INSERTBLOB]       121,
// [INSERTBLOB]       63,
// [INSERTBLOB]       62,
// [INSERTBLOB]       61,
// [INSERTBLOB]       60,
// [INSERTBLOB]       44,
// [INSERTBLOB]       31,
// [INSERTBLOB]       30,
// [INSERTBLOB]       24,
// [INSERTBLOB]       21,
// [INSERTBLOB]       15,
// [INSERTBLOB]       14,
// [INSERTBLOB]       11,
// [INSERTBLOB]       7,
// [INSERTBLOB]       5,
// [INSERTBLOB]       3,
// [INSERTBLOB]       2,
// [INSERTBLOB]       1,
// [INSERTBLOB]     );
// [INSERTBLOB]   // mask }}}
// [INSERTBLOB] // {{{
// [INSERTBLOB]   $tablename = 't1';
// [INSERTBLOB] 
// [INSERTBLOB]   // Delete the existing router since we have some data to replace it.
// [INSERTBLOB]   db_truncate($tablename)->execute();
// [INSERTBLOB] 
// [INSERTBLOB]   $insert = db_insert($tablename)
// [INSERTBLOB]     ->fields(array(
// [INSERTBLOB]       'path',
// [INSERTBLOB]       'blob1',
// [INSERTBLOB] //      'blob2',
// [INSERTBLOB] //      'blob3',
// [INSERTBLOB] //      'blob4',
// [INSERTBLOB]     ));
// [INSERTBLOB] 
// [INSERTBLOB]   $num_records = 0;
// [INSERTBLOB] 
// [INSERTBLOB]   foreach ($menu as $path => $item) {
// [INSERTBLOB]     // Fill in insert object values.
// [INSERTBLOB]     $insert->values(array(
// [INSERTBLOB]       'path' => $path,
// [INSERTBLOB]       'blob1' => $item['blob1'],
// [INSERTBLOB] //      'blob2' => $item['blob2'],
// [INSERTBLOB] //      'blob3' => serialize($item['blob3']),
// [INSERTBLOB] //      'blob4' => serialize($item['blob4']),
// [INSERTBLOB]     ));
// [INSERTBLOB] 
// [INSERTBLOB]     // Execute in batches to avoid the memory overhead of all of those records
// [INSERTBLOB]     // in the query object.
// [INSERTBLOB]     if (++$num_records == 20) {
// [INSERTBLOB]       $insert->execute();
// [INSERTBLOB]       $num_records = 0;
// [INSERTBLOB]     }
// [INSERTBLOB]   }
// [INSERTBLOB] 
// [INSERTBLOB] 
// [INSERTBLOB] echo 'Start Execute<br />';
// [INSERTBLOB]   // Insert any remaining records.
// [INSERTBLOB]   $insert->execute();
// [INSERTBLOB] 
// [INSERTBLOB]   // Store the masks.
// [INSERTBLOB]   variable_set('menu_masks', $masks);
// [INSERTBLOB] 
// [INSERTBLOB] echo 'End of Test <br />';
// [INSERTBLOB] 
// [INSERTBLOB] // }}}


require_once DRUPAL_ROOT . '/modules/user/user.module';

require_once DRUPAL_ROOT . '/includes/actions.inc';
require_once DRUPAL_ROOT . '/includes/ajax.inc';
require_once DRUPAL_ROOT . '/includes/archiver.inc';
require_once DRUPAL_ROOT . '/includes/authorize.inc';
require_once DRUPAL_ROOT . '/includes/batch.inc';
require_once DRUPAL_ROOT . '/includes/batch.queue.inc';
//require_once DRUPAL_ROOT . '/includes/bootstrap.inc';
require_once DRUPAL_ROOT . '/includes/cache.inc';
require_once DRUPAL_ROOT . '/includes/cache-install.inc';
require_once DRUPAL_ROOT . '/includes/common.inc';
require_once DRUPAL_ROOT . '/includes/date.inc';
require_once DRUPAL_ROOT . '/includes/entity.inc';
require_once DRUPAL_ROOT . '/includes/errors.inc';
require_once DRUPAL_ROOT . '/includes/file.inc';
require_once DRUPAL_ROOT . '/includes/file.mimetypes.inc';
require_once DRUPAL_ROOT . '/includes/form.inc';
require_once DRUPAL_ROOT . '/includes/graph.inc';
require_once DRUPAL_ROOT . '/includes/image.inc';
require_once DRUPAL_ROOT . '/includes/install.core.inc';
require_once DRUPAL_ROOT . '/includes/install.inc';
require_once DRUPAL_ROOT . '/includes/iso.inc';
require_once DRUPAL_ROOT . '/includes/json-encode.inc';
require_once DRUPAL_ROOT . '/includes/language.inc';
require_once DRUPAL_ROOT . '/includes/locale.inc';
require_once DRUPAL_ROOT . '/includes/lock.inc';
require_once DRUPAL_ROOT . '/includes/mail.inc';
require_once DRUPAL_ROOT . '/includes/menu.inc';
require_once DRUPAL_ROOT . '/includes/module.inc';
require_once DRUPAL_ROOT . '/includes/pager.inc';
require_once DRUPAL_ROOT . '/includes/password.inc';
require_once DRUPAL_ROOT . '/includes/path.inc';
require_once DRUPAL_ROOT . '/includes/registry.inc';
require_once DRUPAL_ROOT . '/includes/session.inc';
require_once DRUPAL_ROOT . '/includes/stream_wrappers.inc';
require_once DRUPAL_ROOT . '/includes/tablesort.inc';
require_once DRUPAL_ROOT . '/includes/theme.inc';
require_once DRUPAL_ROOT . '/includes/theme.maintenance.inc';
require_once DRUPAL_ROOT . '/includes/token.inc';
require_once DRUPAL_ROOT . '/includes/unicode.entities.inc';
require_once DRUPAL_ROOT . '/includes/unicode.inc';
require_once DRUPAL_ROOT . '/includes/update.inc';
require_once DRUPAL_ROOT . '/includes/updater.inc';
require_once DRUPAL_ROOT . '/includes/utility.inc';
require_once DRUPAL_ROOT . '/includes/xmlrpc.inc';
require_once DRUPAL_ROOT . '/includes/xmlrpcs.inc';

//require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
openlog('USERROLESAVE', LOG_PERROR, LOG_LOCAL0);
// Create a default role for site administrators, with all available permissions assigned.
$admin_role = new stdClass();
$admin_role->name = 'administrator';
$admin_role->weight = 2;
syslog (LOG_DEBUG, serialize($admin_role));
user_role_save($admin_role);
syslog (LOG_DEBUG, serialize($admin_role));
closelog();

echo 'End of Test<br />';

  } // End of TestQuery()



  /**
   *
   */

  function tryInsert($table = 'test_table') {
    try {
       db_insert($table)
         ->fields(array('id' => mt_rand(10, 20)))
         ->execute();
      return TRUE;
    }
    catch (Exception $e) {
      return FALSE;
    }
  }

  /**
   * Checks that a table or column comment matches a given description.
   *
   * @param $description
   *   The asserted description.
   * @param $table
   *   The table to test.
   * @param $column
   *   Optional column to test.
   */
  function checkSchemaComment($description, $table, $column = NULL) {
    if (method_exists(Database::getConnection()->schema(), 'getComment')) {
      $comment = Database::getConnection()->schema()->getComment($table, $column);
      $this->assertEqual($comment, $description, t('The comment matches the schema description.'));
    }
  }


  /**
   * Tries to insert a negative value into columns defined as unsigned.
   *
   * @param $table_name
   *   The table to insert
   * @param $column_name
   *   The column to insert
   * @return
   *   TRUE if the insert succeeded, FALSE otherwise
   */
  function tryUnsignedInsert($table_name, $column_name) {
    try {
      db_insert($table_name)
         ->fields(array($column_name => -1))
         ->execute();
      return TRUE;
    }
    catch (Exception $e) {
      return FALSE;
    }
  }

  /**
   * Test adding columns to an existing table.
   */
  function SKIP_testSchemaAddField() {

    // Test int and float types.
    foreach (array('int', 'float') as $type) {
      foreach (array('tiny', 'small', 'medium', 'normal', 'big') as $size) {
        $base_field_spec = array(
          'type' => $type,
          'size' => $size,
        );
        $variations = array(
          array('not null' => FALSE),
          array('not null' => FALSE, 'default' => 7),
          array('not null' => TRUE, 'initial' => 1),
          array('not null' => TRUE, 'initial' => 1, 'default' => 7),
        );

        foreach ($variations as $variation) {
          $field_spec = $variation + $base_field_spec;
echo '2nd Loop : ' . $type . ' : ' . $size . '<br />';
print_r($field_spec);
echo '<br /><br />';
          $this->assertFieldAdditionRemoval($field_spec);
        }
      }
    }

    // Test numeric types.
    foreach (array(5, 10, 40, 65) as $precision) {
      foreach (array(2, 10, 30) as $scale) {
echo 'Test numeric types. precision:scale ' . $precision . ':' . $scale . '<br />';
        if ($precision <= $scale) {
          // Precision must be smaller then scale.
          continue;
        }

        $base_field_spec = array(
          'type' => 'numeric',
          'scale' => $scale,
          'precision' => $precision,
        );
        $variations = array(
          array('not null' => FALSE),
          array('not null' => FALSE, 'default' => 7),
          array('not null' => TRUE, 'initial' => 1),
          array('not null' => TRUE, 'initial' => 1, 'default' => 7),
        );

        foreach ($variations as $variation) {
          $field_spec = $variation + $base_field_spec;
echo 'cont. Test numeric types. fleld_spec = ';
print_r($field_spec);
echo '<br />';
          $this->assertFieldAdditionRemoval($field_spec);
        }
      }
    }
  }

  /**
   * Assert that a given field can be added and removed from a table.
   *
   * The addition test covers both defining a field of a given specification
   * when initially creating at table and extending an existing table.
   *
   * @param $field_spec
   *   The schema specification of the field.
   */
  protected function assertFieldAdditionRemoval($field_spec) {
    // Try creating the field on a new table.
    $table_name = 'test_table_' . ($this->counter++);
    $table_spec = array(
      'fields' => array(
        'serial_column' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
        'test_field' => $field_spec,
      ),
      'primary key' => array('serial_column'),
    );
    db_drop_table($table_name);
    db_create_table($table_name, $table_spec);
    $this->pass(t('Table %table created.', array('%table' => $table_name)));

    // Check the characteristics of the field.
echo 'Ln324  assertFieldCharacteristics : ' . $table_name . ':' . 'test_field<br />';
    $this->assertFieldCharacteristics($table_name, 'test_field', $field_spec);

    // Clean-up.
    db_drop_table($table_name);

    // Try adding a field to an existing table.
    $table_name = 'test_table_' . ($this->counter++);
    $table_spec = array(
      'fields' => array(
        'serial_column' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      ),
      'primary key' => array('serial_column'),
    );
    db_drop_table($table_name);
    db_create_table($table_name, $table_spec);
    $this->pass(t('Table %table created.', array('%table' => $table_name)));

    // Insert some rows to the table to test the handling of initial values.
    for ($i = 0; $i < 3; $i++) {
      db_insert($table_name)
        ->useDefaults(array('serial_column'))
        ->execute();
    }

echo 'Ln348  db_add_field ' . $table_name . '.test_field <br />';
print_r($field_spec);
echo '<br /><br />';
    db_add_field($table_name, 'test_field', $field_spec);
    $this->pass(t('Column %column created.', array('%column' => 'test_field')));

    // Check the characteristics of the field.
echo 'Ln355  assertFieldCharacteristics : ' . $table_name . ':' . 'test_field<br />';
    $this->assertFieldCharacteristics($table_name, 'test_field', $field_spec);

    // Clean-up.
    db_drop_field($table_name, 'test_field');
    db_drop_table($table_name);
  }

  /**
   * Assert that a newly added field has the correct characteristics.
   */
  protected function assertFieldCharacteristics($table_name, $field_name, $field_spec) {
    // Check that the initial value has been registered.
    if (isset($field_spec['initial'])) {
      // There should be no row with a value different then $field_spec['initial'].
//      $count = db_select($table_name)
//        ->fields($table_name, array('serial_column'))
//        ->condition($field_name, $field_spec['initial'], '<>')
//        ->countQuery()
//        ->execute()
//        ->fetchField();
echo 'FOCUS ' . $table_name . '<br />';
echo 'assertEqual count 2 = <br />';
$count = db_select($table_name)
	->fields($table_name, array('serial_column'))
	->countQuery()
	->execute()
	->fetchField();
echo 'FOCUS<br />';
print_r($count);
echo '<br /><br />';
if ($table_name == 'test_table_140') {
	echo 'Plain SQL: <br /><br />';
//	$rsql = 'SELECT count(*) AS serial_column FROM test_table_140 test_table_140 WHERE (test_field <> 1)';
	$rsql = 'SELECT COUNT(*) AS expression FROM (SELECT 1 AS expression FROM test_table_140 test_table_140 WHERE (test_field <> 1) ) subquery';
	echo $rsql . '<br />';
	$rset = db_query($rsql)->fetchField();
	print_r($rset);
	echo '<br /><br />';
}
echo '<br /><br />';
echo 'assertEqual count 4 = <br />';
$count = db_select($table_name)
	->fields($table_name, array('serial_column'))
	->condition($field_name, $field_spec['initial'], '<>')
	->countQuery()
	->execute()
	->fetchField();
print_r($count);
echo '<br /><br />';
echo '<br /><br />';
$count = 0;
      $this->assertEqual($count, 0, t('Initial values filled out.'));
    }

    // Check that the default value has been registered.
    if (isset($field_spec['default'])) {
      // Try inserting a row, and check the resulting value of the new column.
      $id = db_insert($table_name)
        ->useDefaults(array('serial_column'))
        ->execute();
      $field_value = db_select($table_name)
        ->fields($table_name, array($field_name))
        ->condition('serial_column', $id)
        ->execute()
        ->fetchField();
      $this->assertEqual($field_value, $field_spec['default'], t('Default value registered.'));
    }

    db_drop_field($table_name, $field_name);
  }
}
